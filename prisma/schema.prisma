// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  password        String
  profileImage    String?
  createdAt       DateTime          @default(now()) @db.Timestamp(0)
  updatedAt       DateTime          @updatedAt @db.Timestamp(0)
  CommunityMember CommunityMember[]
}

model Community {
  id              Int               @id @default(autoincrement())
  communityname   String            @unique
  communitydetail String?
  communityIcon   String?
  communityBanner String?
  membersname     String
  membersImage    String?
  createdAt       DateTime          @default(now()) @db.Timestamp(0)
  updatedAt       DateTime          @updatedAt @db.Timestamp(0)
  CommunityMember CommunityMember[]
}

model CommunityMember {
  role        Role      @default(MEMBER)
  membername  String?
  memberImage String?
  joinOrder   Int
  joinedAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @db.Timestamp(0)
  userId      Int
  communityId Int
  user        User      @relation(fields: [userId], references: [id])
  community   Community @relation(fields: [communityId], references: [id])
  Post        Post[]

  @@id([userId, communityId])
}

enum Role {
  ADMIN
  MODERATOR
  MEMBER
}

enum PostStatus {
  PENDING
  APPROVED
  REMOVED
}

model Post {
  id                Int        @id @default(autoincrement())
  postImg           String?
  description     String
  createdAt         DateTime   @default(now()) @db.Timestamp(0)
  updatedAt         DateTime   @updatedAt @db.Timestamp(0)
  poststatus        PostStatus @default(PENDING)
  authorUserId      Int
  authorCommunityId Int
  authorMembership CommunityMember @relation(fields: [authorUserId, authorCommunityId], references: [userId, communityId])
}
